/*
 * =====================================================================================
 *
 *       Filename:  trie.cpp
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  03/03/2012 12:38:55
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Qijiong Jiang (Rabby), Qijiongjiang1@hotmail.com
 *        Company:  NULL
 *
 * =====================================================================================
 */
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include "trie.h"
using namespace std;



vector<string> load_key_words_file(string filename)
{
    FILE *f;
    string line;
    vector<string> diccionary;
    ifstream myfile (filename.c_str());


    if (myfile.is_open())
    {
        while ( myfile.good() )
        {
            getline (myfile,line);
            diccionary.push_back(line);
        }
        myfile.close();
    }
    else
    {
        cout << "Unable to open file"; 
        diccionary.resize(0);
        return diccionary;
    }
    //for (vector<string>::iterator it = diccionary.begin(); it!=diccionary.end(); ++it)
    //cout<<*it<<endl;
    return diccionary;
}


Trie::Trie()
{
        root = new Node();
}

Trie::~Trie()
{
        delete(root);
}

void Trie::addWord(string s)
{
    Node* current = root;

    if ( s.length() == 0 )
    {
        current->setFolder(); // an empty word
        return;
    }

    for ( int i = 0; i < s.length(); i++ )
    {        
        Node* child = current->findChild(s[i]);
        if ( child != NULL )
        {
            current = child;
        }
        else
        {
            Node* tmp = new Node();
            tmp->setContent(s[i]);
            current->addChild(tmp);
            current = tmp;
        }
        if ( i == s.length() -1)
            current->setFolder();
    }

}
unsigned int Trie::searchPrefix(const string& s, unsigned int init_pos)
{
    Node* current = root;
    unsigned int fin_pos = init_pos; 
    for ( int i = init_pos; i < s.length(); i++ )
    {
        Node* tmp = current->findChild(s[i]);
        if ( tmp == NULL )
            return fin_pos;
        current = tmp;
        if (current->isFolder()){
            fin_pos = i;
        }
    }

    return fin_pos;
}

bool Trie::searchWord(string s)
{
    Node* current = root;

    while ( current != NULL )
    {
        for ( int i = 0; i < s.length(); i++ )
        {
            Node* tmp = current->findChild(s[i]);
            if ( tmp == NULL )
                return false;
            current = tmp;
        }

        if ( current->isFolder())
            return true;
        else
            return false;
    }
    return false;
}
vector< pair<unsigned int, unsigned int> > Trie::searchWordsInText(const string&  text){
    unsigned int f ;
    vector <pair<unsigned int, unsigned int> > matched_words_positions; 
    for (int i = 0;i<text.length();){
        f=searchPrefix(text, i);
        if (i!=f){
            cout<<i<<" "<<f<<" "<<text.substr(i,f-i+1)<<endl;
            i = f+1;
        }
        else 
            i++;
    }    
}
