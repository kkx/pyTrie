/*
 * =====================================================================================
 *
 *       Filename:  trie.h
 *
 *    Description:  trie functions declarations
 *
 *        Version:  1.0
 *        Created:  03/03/2012 12:36:20
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Qijiong Jiang (Rabby), Qijiongjiang1@hotmail.com
 *        Company:  NULL
 *
 * =====================================================================================
 */

#include <string>
#include <vector>
#include <map>


using namespace std;
vector<string> load_key_words_file(string filename);

class Node {
     private:
        unsigned char mContent;
        bool folder;
        map<unsigned char,Node*> mChildren;

    public:
        Node() {   
            folder = false;
        }
        ~Node(){
            map < unsigned char, Node* >::iterator it;
            for ( it = mChildren.begin() ; it != mChildren.end() ; it++ ) {    
               delete((*it).second);
            } 
        }
        unsigned char getContent() { 
            return mContent; 
        }
        void setContent(unsigned char c) {
            mContent = c; 
        }
        bool isFolder() { 
            return folder; 
        }
        void setFolder() {
            folder = true; 
        }

        Node* findChild(unsigned char c)
        {
            map <unsigned char,Node*> ::iterator it = mChildren.find(c);
            if (it!=mChildren.end()){
                return (*it).second;
            }
            else{
                return NULL;
            }
        }


        void addChild(Node* child) { 
            mChildren.insert(pair<unsigned char,Node*>(child->mContent, child));
        }

        map <unsigned char ,Node*> children() { 
            return mChildren; 
        }

};

class Trie {
    public:
        Trie();
        ~Trie();
        void addWord(string s);
        bool searchWord(string s);
        void deleteWord(string s);
        unsigned int searchPrefix(const string& s, unsigned int init_pos);
        vector< pair<unsigned int, unsigned int> >searchWordsInText(const string&  text);
    private:
        Node* root;
};



